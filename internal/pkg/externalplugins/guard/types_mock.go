// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package guard is a generated GoMock package.
package guard

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "k8s.io/test-infra/prow/github"
)

// MockgithubClient is a mock of githubClient interface.
type MockgithubClient struct {
	ctrl     *gomock.Controller
	recorder *MockgithubClientMockRecorder
}

// MockgithubClientMockRecorder is the mock recorder for MockgithubClient.
type MockgithubClientMockRecorder struct {
	mock *MockgithubClient
}

// NewMockgithubClient creates a new mock instance.
func NewMockgithubClient(ctrl *gomock.Controller) *MockgithubClient {
	mock := &MockgithubClient{ctrl: ctrl}
	mock.recorder = &MockgithubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgithubClient) EXPECT() *MockgithubClientMockRecorder {
	return m.recorder
}

// AddLabel mocks base method.
func (m *MockgithubClient) AddLabel(owner, repo string, number int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabel", owner, repo, number, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabel indicates an expected call of AddLabel.
func (mr *MockgithubClientMockRecorder) AddLabel(owner, repo, number, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabel", reflect.TypeOf((*MockgithubClient)(nil).AddLabel), owner, repo, number, label)
}

// CreateComment mocks base method.
func (m *MockgithubClient) CreateComment(owner, repo string, number int, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", owner, repo, number, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockgithubClientMockRecorder) CreateComment(owner, repo, number, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockgithubClient)(nil).CreateComment), owner, repo, number, comment)
}

// GetPullRequestChanges mocks base method.
func (m *MockgithubClient) GetPullRequestChanges(org, repo string, number int) ([]github.PullRequestChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestChanges", org, repo, number)
	ret0, _ := ret[0].([]github.PullRequestChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestChanges indicates an expected call of GetPullRequestChanges.
func (mr *MockgithubClientMockRecorder) GetPullRequestChanges(org, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestChanges", reflect.TypeOf((*MockgithubClient)(nil).GetPullRequestChanges), org, repo, number)
}

// RemoveLabel mocks base method.
func (m *MockgithubClient) RemoveLabel(owner, repo string, number int, label string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabel", owner, repo, number, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLabel indicates an expected call of RemoveLabel.
func (mr *MockgithubClientMockRecorder) RemoveLabel(owner, repo, number, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabel", reflect.TypeOf((*MockgithubClient)(nil).RemoveLabel), owner, repo, number, label)
}

// RequestReview mocks base method.
func (m *MockgithubClient) RequestReview(org, repo string, number int, logins []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReview", org, repo, number, logins)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestReview indicates an expected call of RequestReview.
func (mr *MockgithubClientMockRecorder) RequestReview(org, repo, number, logins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReview", reflect.TypeOf((*MockgithubClient)(nil).RequestReview), org, repo, number, logins)
}
